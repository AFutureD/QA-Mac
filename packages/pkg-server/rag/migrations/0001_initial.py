# Generated by Django 5.0.6 on 2024-06-06 08:56

import pgvector.django
import rag.domain.models
from django.db import migrations, models
from pgvector.django import VectorExtension

class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        VectorExtension(),
        migrations.CreateModel(
            name="Memory",
            fields=[
                ("memory_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "memory_type",
                    models.CharField(
                        choices=[
                            ("NOTE", "NOTE"),
                            ("REMINDER", "REMINDER"),
                            ("PIC", "PIC"),
                        ]
                    ),
                ),
                ("data", rag.domain.models.AppleNoteField(null=True)),
                ("biz_id", models.CharField(max_length=100)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "memories",
            },
        ),
        migrations.CreateModel(
            name="MemorySyncLog",
            fields=[
                ("log_id", models.AutoField(primary_key=True, serialize=False)),
                ("biz_id", models.CharField(max_length=100)),
                ("biz_modified_at", models.DateTimeField(auto_now=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "memories_sync_log",
                "ordering": ["-biz_modified_at"],
            },
        ),
        migrations.CreateModel(
            name="Neuron",
            fields=[
                ("neuron_id", models.AutoField(primary_key=True, serialize=False)),
                ("content", models.TextField()),
                ("embedding", pgvector.django.VectorField(dimensions=1536)),
                ("memory_id", models.IntegerField()),
                ("position", rag.domain.models.PositionField(null=True)),
                (
                    "embed_model",
                    models.CharField(
                        choices=[
                            (
                                "OPENAI_TEXT_EMBEDDING_3_LARGE",
                                "openai text-embedding-3-large",
                            ),
                            (
                                "OPENAI_TEXT_EMBEDDING_3_SMALL",
                                "openai text-embedding-3-small",
                            ),
                        ]
                    ),
                ),
            ],
            options={
                "db_table": "neurons",
            },
        ),
        migrations.CreateModel(
            name="NeuronIndexLog",
            fields=[
                ("log_id", models.AutoField(primary_key=True, serialize=False)),
                ("memory_id", models.IntegerField()),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "not started"),
                            ("PROCESSING", "processing"),
                            ("INDEXED", "indexed"),
                        ],
                        default="NOT_STARTED",
                    ),
                ),
                ("indexed_at", models.DateTimeField(null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "neuron_index_logs",
            },
        ),
        migrations.AddConstraint(
            model_name="memory",
            constraint=models.UniqueConstraint(fields=("biz_id",), name="uk_biz_id"),
        ),
        migrations.AddIndex(
            model_name="memorysynclog",
            index=models.Index(fields=["biz_modified_at"], name="idx_biz_modified_at"),
        ),
        migrations.AddIndex(
            model_name="neuron",
            index=pgvector.django.HnswIndex(
                ef_construction=64,
                fields=["embedding"],
                m=16,
                name="idx_hnsw_embedding",
                opclasses=["vector_cosine_ops"],
            ),
        ),
        migrations.AddIndex(
            model_name="neuronindexlog",
            index=models.Index(fields=["memory_id"], name="idx_memory_id"),
        ),
    ]
